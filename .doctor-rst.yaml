rules:
    american_english: ~
    argument_variable_must_match_type:
        arguments:
            - { type: 'ContainerBuilder', name: 'containerBuilder' }
            - { type: 'ContainerConfigurator', name: 'containerConfigurator' }
    avoid_repetetive_words: ~
    blank_line_after_anchor: ~
    blank_line_after_directive: ~
    blank_line_before_directive: ~
    composer_dev_option_not_at_the_end: ~
    correct_code_block_directive_based_on_the_content: ~
    deprecated_directive_should_have_version: ~
    ensure_bash_prompt_before_composer_command: ~
    ensure_exactly_one_space_before_directive_type: ~
    ensure_exactly_one_space_between_link_definition_and_link: ~
    ensure_link_definition_contains_valid_url: ~
    ensure_order_of_code_blocks_in_configuration_block: ~
    extend_abstract_controller: ~
    extension_xlf_instead_of_xliff: ~
    forbidden_directives:
        directives:
            - '.. index::'
    indention: ~
    lowercase_as_in_use_statements: ~
    max_blank_lines:
        max: 2
    max_colons: ~
    no_app_console: ~
    no_blank_line_after_filepath_in_php_code_block: ~
    no_blank_line_after_filepath_in_twig_code_block: ~
    no_blank_line_after_filepath_in_xml_code_block: ~
    no_blank_line_after_filepath_in_yaml_code_block: ~
    no_brackets_in_method_directive: ~
    no_composer_req: ~
    no_directive_after_shorthand: ~
    no_explicit_use_of_code_block_php: ~
    no_inheritdoc: ~
    no_merge_conflict: ~
    no_namespace_after_use_statements: ~
    no_php_open_tag_in_code_block_php_directive: ~
    no_space_before_self_xml_closing_tag: ~
    only_backslashes_in_namespace_in_php_code_block: ~
    only_backslashes_in_use_statements_in_php_code_block: ~
    ordered_use_statements: ~
    php_prefix_before_bin_console: ~
    remove_trailing_whitespace: ~
    replace_code_block_types: ~
    replacement: ~
    short_array_syntax: ~
    space_between_label_and_link_in_doc: ~
    space_between_label_and_link_in_ref: ~
    string_replacement: ~
    title_underline_length_must_match_title_length: ~
    typo: ~
    unused_links: ~
    use_deprecated_directive_instead_of_versionadded: ~
    use_named_constructor_without_new_keyword_rule: ~
    use_https_xsd_urls: ~
    valid_inline_highlighted_namespaces: ~
    valid_use_statements: ~
    versionadded_directive_should_have_version: ~
    yaml_instead_of_yml_suffix: ~
    yarn_dev_option_at_the_end: ~

    #   master
    versionadded_directive_major_version:
        major_version: 5

    versionadded_directive_min_version:
        min_version: '5.0'

    deprecated_directive_major_version:
        major_version: 5

    deprecated_directive_min_version:
        min_version: '5.0'

# do not report as violation
whitelist:
    regex:
        - '/FOSUserBundle(.*)\.yml/'
        - '/(.*)\.orm\.yml/' # currently DoctrineBundle only supports .yml
        - /docker-compose\.yml/
    lines:
        - 'in config files, so the old ``app/config/config_dev.yml`` goes to'
        - '#. The most important config file is ``app/config/services.yml``, which now is'
        - 'The bin/console Command'
        - '.. _`LDAP injection`: http://projects.webappsec.org/w/page/13246947/LDAP%20Injection'
        - '.. versionadded:: 1.9.0' # Encore
        - '.. versionadded:: 1.11' # Messenger (Middleware / DoctrineBundle)
        - '.. versionadded:: 1.18' # Flex in setup/upgrade_minor.rst
        - '.. versionadded:: 1.0.0' # Encore
        - '.. versionadded:: 5.1' # Private Services
        - '123,' # assertion for var_dumper - components/var_dumper.rst
        - '"foo",' # assertion for var_dumper - components/var_dumper.rst
        - '$var .= "Because of this `\xE9` octet (\\xE9),\n";'
        - '.. versionadded:: 0.2' # MercureBundle
        - '.. versionadded:: 3.6' # MonologBundle
        - '.. versionadded:: 3.8' # MonologBundle
        - '// bin/console'
        - '.. _`a feature to test applications using Mercure`: https://github.com/symfony/panther#creating-isolated-browsers-to-test-apps-using-mercure-or-websocket'
        - '..  End to End Tests (E2E)'
        - 'First, create a new ``apps`` directory at the root of your project, which will' # configuration/multiple_kernels.rst
        - '├─ apps/' # configuration/multiple_kernels.rst
        - '``apps/`` directory. Therefore, you should carefully consider what is' # configuration/multiple_kernels.rst
        - 'Since the new ``apps/api/src/`` directory will host the PHP code related to the' # configuration/multiple_kernels.rst
        - '"Api\\": "apps/api/src/"' # configuration/multiple_kernels.rst
        - "return $this->getProjectDir().'/apps/'.$this->id.'/config';" # configuration/multiple_kernels.rst
        - '``apps/`` as it is used in the Kernel to load the specific application' # configuration/multiple_kernels.rst
        - '``apps/admin/templates/`` which you will need to manually configure under the' # configuration/multiple_kernels.rst
        - '# apps/admin/config/packages/twig.yaml' # configuration/multiple_kernels.rst
        - "'%kernel.project_dir%/apps/admin/templates': Admin" # configuration/multiple_kernels.rst
        - '// apps/api/tests/ApiTestCase.php' # configuration/multiple_kernels.rst
        - 'Now, create a ``tests/`` directory inside the ``apps/api/`` application. Then,' # configuration/multiple_kernels.rst
        - '"Api\\Tests\\": "apps/api/tests/"' # configuration/multiple_kernels.rst
        - '<directory>apps/api/tests</directory>' # configuration/multiple_kernels.rst
