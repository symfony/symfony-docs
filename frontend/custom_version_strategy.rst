.. index::
   single: Asset; Custom Version Strategy

How to Use a Custom Version Strategy for Assets
===============================================

Asset versioning is a technique that improves the performance of web
applications by adding a version identifier to the URL of the static assets
(CSS, JavaScript, images, etc.) When the content of the asset changes, its
identifier is also modified to force the browser to download it again instead of
reusing the cached asset.

If your application requires advanced versioning, such as generating the
version dynamically based on some external information, you can create your
own version strategy.

.. note::

    Symfony provides various cache busting implementations via the
    :ref:`version <reference-framework-assets-version>`,
    :ref:`version_format <reference-assets-version-format>`, and
    :ref:`json_manifest_path <reference-assets-json-manifest-path>`
    configuration options.

Creating your Own Asset Version Strategy
----------------------------------------

The following example shows how to create a version strategy compatible with
`gulp-buster`_. This tool defines a configuration file called ``busters.json``
which maps each asset file to its content hash:

.. code-block:: json

    {
        "js/script.js": "f9c7afd05729f10f55b689f36bb20172",
        "css/style.css": "91cd067f79a5839536b46c494c4272d8"
    }

Implement VersionStrategyInterface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Asset version strategies are PHP classes that implement the
:class:`Symfony\\Component\\Asset\\VersionStrategy\\VersionStrategyInterface`.
In this example, the constructor of the class takes as arguments the path to
the manifest file generated by `gulp-buster`_ and the format of the generated
version string::

    // src/AppBundle/Asset/VersionStrategy/GulpBusterVersionStrategy.php
    namespace AppBundle\Asset\VersionStrategy;

    use Symfony\Component\Asset\VersionStrategy\VersionStrategyInterface;

    class GulpBusterVersionStrategy implements VersionStrategyInterface
    {
        /**
         * @var string
         */
        private $manifestPath;

        /**
         * @var string
         */
        private $format;

        /**
         * @var string[]
         */
        private $hashes;

        /**
         * @param string      $manifestPath
         * @param string|null $format
         */
        public function __construct($manifestPath, $format = null)
        {
            $this->manifestPath = $manifestPath;
            $this->format = $format ?: '%s?%s';
        }

        public function getVersion($path)
        {
            if (!is_array($this->hashes)) {
                $this->hashes = $this->loadManifest();
            }

            return isset($this->hashes[$path]) ? $this->hashes[$path] : '';
        }

        public function applyVersion($path)
        {
            $version = $this->getVersion($path);

            if ('' === $version) {
                return $path;
            }

            $versionized = sprintf($this->format, ltrim($path, '/'), $version);

            if ($path && '/' === $path[0]) {
                return '/'.$versionized;
            }

            return $versionized;
        }

        private function loadManifest()
        {
            return json_decode(file_get_contents($this->manifestPath), true);
        }
    }

Register the Strategy Service
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After creating the strategy PHP class, register it as a Symfony service.

.. configuration-block::

    .. code-block:: yaml

        # app/config/services.yml
        services:
            AppBundle\Asset\VersionStrategy\GulpBusterVersionStrategy:
                arguments:
                    - "%kernel.project_dir%/busters.json"
                    - "%%s?version=%%s"
                public: false

    .. code-block:: xml

        <!-- app/config/services.xml -->
        <?xml version="1.0" encoding="UTF-8" ?>
        <container xmlns="http://symfony.com/schema/dic/services"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://symfony.com/schema/dic/services
                http://symfony.com/schema/dic/services/services-1.0.xsd"
        >
            <services>
                <service id="AppBundle\Asset\VersionStrategy\GulpBusterVersionStrategy" public="false">
                    <argument>%kernel.project_dir%/busters.json</argument>
                    <argument>%%s?version=%%s</argument>
                </service>
            </services>
        </container>

    .. code-block:: php

        // app/config/services.php
        use Symfony\Component\DependencyInjection\Definition;
        use AppBundle\Asset\VersionStrategy\GulpBusterVersionStrategy;

        $container->autowire(GulpBusterVersionStrategy::class)
            ->setArguments(
                array(
                    '%kernel.project_dir%/busters.json',
                    '%%s?version=%%s',
                )
        )->setPublic(false);

Finally, enable the new asset versioning for all the application assets or just
for some :ref:`asset package <reference-framework-assets-packages>` thanks to
the :ref:`version_strategy <reference-assets-version-strategy>` option:

.. configuration-block::

    .. code-block:: yaml

        # app/config/config.yml
        framework:
            # ...
            assets:
                version_strategy: 'AppBundle\Asset\VersionStrategy\GulpBusterVersionStrategy'

    .. code-block:: xml

        <!-- app/config/config.xml -->
        <?xml version="1.0" encoding="UTF-8" ?>
        <container xmlns="http://symfony.com/schema/dic/services"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:framework="http://symfony.com/schema/dic/symfony"
            xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd
                http://symfony.com/schema/dic/symfony http://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

            <framework:config>
                <framework:assets version-strategy="AppBundle\Asset\VersionStrategy\GulpBusterVersionStrategy" />
            </framework:config>
        </container>

    .. code-block:: php

        // app/config/config.php
        use AppBundle\Asset\VersionStrategy\GulpBusterVersionStrategy;

        $container->loadFromExtension('framework', array(
            // ...
            'assets' => array(
                'version_strategy' => GulpBusterVersionStrategy::class,
            ),
        ));

.. _`gulp-buster`: https://www.npmjs.com/package/gulp-buster
